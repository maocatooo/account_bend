type (
	LoginReq {
		Code      string `json:"code,omitempty,optional"`
		AvatarUrl string `json:"avatarUrl,optional"`
		Name      string `json:"name,optional"`
	}

	LoginReply {
		ID           string `json:"id,omitempty"`
		Name         string `json:"name,omitempty"`
		AccessToken  string `json:"accessToken,omitempty"`
		AccessExpire int    `json:"accessxpire,omitempty"`
		RefreshAfter int    `json:"refreshAfter,omitempty"`
		AvatarUrl    string `json:"avatarUrl"`
	}

	Book {
		ID          string `json:"id"`
		Name        string `json:"name"`
		CreatedTime int    `json:"createdTime"`
		Tp          int    `json:"tp"`
		Uid         string `json:"uid"`
	}
	Tag {
		ID          string `json:"id"`
		Name        string `json:"name"`
		CreatedTime int    `json:"createdTime"`
		Priority    int    `json:"priority"`
	}
	Journal {
		ID     string `json:"id"`
		Name   string `json:"name"`
		Date   int    `json:"date"`
		Tid    string `json:"tid"`
		Tname  string `json:"tname"`
		Amount int    `json:"amount"`
		Record string `json:"record"`
		BookID string `json:"BookID"`
		Uid    string `json:"uid"`
	}
)

service account-api {
	@server(
		handler: login
	)
	post /login (LoginReq) returns (LoginReply)
}

@server (
	jwt :Auth
)
service account-api {

	@server(
		handler: BookList
	)
	get /book  returns ([]*Book)

	@server(
		handler: tagList
	)
	get /tag  returns ([]*Tag)

	@server(
		handler: createTag
	)
	post /tag (Tag) returns (Tag)
	@server(
		handler: createJournal
	)
	post /journal (Journal) returns (Journal)
	@server(
		handler: journalList
	)
	get /journal (Journal) returns ([]*Journal)

}